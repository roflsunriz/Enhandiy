import{r as h,i as u}from"./errorHandling.js";import{a as f}from"./api-client.js";import{p}from"./http.js";class g{currentFolderId=null;constructor(){this.init()}init(){const e=new URLSearchParams(window.location.search);this.currentFolderId=e.get("folder")||null,this.setupEventListeners(),this.loadFolderOptions()}setupEventListeners(){this.bindCreateFolderButton(),document.addEventListener("click",e=>{const r=e.target;if(r.classList.contains("rename-folder")){e.preventDefault();const o=r.dataset.folderId;o&&this.showRenameFolderDialog(o)}if(r.classList.contains("move-folder")){e.preventDefault();const o=r.dataset.folderId;o&&this.showMoveFolderDialog(o)}if(r.classList.contains("delete-folder")){e.preventDefault();const o=r.dataset.folderId;o&&this.showDeleteFolderDialog(o)}})}bindCreateFolderButton(){const e=document.getElementById("create-folder-btn");e?(e.addEventListener("click",()=>this.showCreateFolderDialog()),console.log("Create folder button bound")):(console.log("Create folder button not found, retrying in 500ms"),setTimeout(()=>this.bindCreateFolderButton(),500))}async loadFolderOptions(){try{const e=await f.getFolders();this.updateFolderSelect(e.data||[])}catch(e){console.error("フォルダ読み込みエラー:",e)}}updateFolderSelect(e){const r=document.getElementById("folder-select");if(!r)return;const o=r.value;r.innerHTML='<option value="">ルートフォルダ</option>';const t=(s,a=0)=>{s.forEach(n=>{const c=document.createElement("option");c.value=n.id,c.textContent="　".repeat(a)+n.name,r.appendChild(c);const l=n;"children"in n&&l.children&&l.children.length>0&&t(l.children,a+1)})};t(e),r.value=o}showCreateFolderDialog(){const e=window.prompt("新しいフォルダ名を入力してください:");!e||!e.trim()||this.createFolder(e.trim(),this.currentFolderId)}async createFolder(e,r=null){try{await f.createFolder(e,r||void 0),alert("フォルダを作成しました: "+e),window.location.reload()}catch(o){console.error("フォルダ作成エラー:",o);const t=o instanceof Error?o.message:"フォルダ作成に失敗しました";alert("エラー: "+t)}}showRenameFolderDialog(e){const r=document.querySelector(`[data-folder-id="${e}"] .folder-item`),o=r?r.textContent?.trim().replace("📁","").trim():"",t=window.prompt("新しいフォルダ名を入力してください:",o);!t||!t.trim()||t.trim()===o||this.renameFolder(e,t.trim())}async renameFolder(e,r){try{await f.updateFolder(e,r),alert("フォルダ名を変更しました: "+r),window.location.reload()}catch(o){console.error("フォルダ名変更エラー:",o);const t=o instanceof Error?o.message:"フォルダ名変更に失敗しました";alert("エラー: "+t)}}async showMoveFolderDialog(e){try{const o=(await f.getFolders()).data||[];let t=`ルートフォルダに移動する場合は「root」と入力してください。

利用可能なフォルダ:
`;const s=(c,l=0)=>{c.forEach(i=>{i.id!==e&&(t+="　".repeat(l)+`${i.id}: ${i.name}
`);const d=i;"children"in i&&d.children&&d.children.length>0&&s(d.children,l+1)})};s(o);const a=window.prompt(t+`
移動先のフォルダIDを入力してください:`);if(a===null)return;const n=a.toLowerCase()==="root"?null:a;this.moveFolder(e,n)}catch(r){console.error("フォルダ移動ダイアログエラー:",r);const o=r instanceof Error?r.message:"フォルダ移動の準備に失敗しました";alert("エラー: "+o)}}async moveFolder(e,r){try{console.warn("フォルダ移動機能は未実装です",{folderId:e,newParentId:r}),alert("フォルダ移動機能は現在実装中です。");return}catch(o){console.error("フォルダ移動エラー:",o);const t=o instanceof Error?o.message:"フォルダ移動に失敗しました";alert("エラー: "+t)}}async showDeleteFolderDialog(e){const r=document.querySelector(`[data-folder-id="${e}"] .folder-item`),o=r?r.textContent?.trim().replace("📁","").trim():"フォルダ";try{const s=(await f.getFolderFileCount(e)).data?.count||0,a=0;if(s===0&&a===0)confirm(`フォルダ「${o}」を削除しますか？`)&&this.deleteFolder(e,!1);else{let n=`フォルダ「${o}」には以下が含まれています：
`;s>0&&(n+=`・ファイル: ${s}個
`),a>0,n+=`
削除方法を選択してください：
`,n+=`「OK」= 中身をルートフォルダに移動して削除
`,n+="「キャンセル」= 削除を中止",confirm(n)&&this.deleteFolder(e,!0)}}catch(t){console.error("フォルダ削除確認エラー:",t);const s=t instanceof Error?t.message:"フォルダ情報の取得に失敗しました";alert("エラー: "+s)}}async deleteFolder(e,r=!1){try{const o=await f.deleteFolder(e);if(o.success)alert("フォルダを削除しました");else throw new Error(o.error||"フォルダ削除に失敗しました");window.location.reload()}catch(o){console.error("フォルダ削除エラー:",o);const t=o instanceof Error?o.message:"フォルダ削除に失敗しました";alert("エラー: "+t)}}}async function w(m){const e=window.config;if(!e||!e.folders_enabled){alert("フォルダ機能が無効になっています。設定を確認してください。");return}try{const o=(await f.getFolders()).data||[];let t=`ルートフォルダに移動する場合は「root」と入力してください。

利用可能なフォルダ:
`;const s=(c,l=0)=>{c.forEach(i=>{t+="　".repeat(l)+`${i.id}: ${i.name}
`;const d=i;"children"in i&&d.children&&d.children.length>0&&s(d.children,l+1)})};s(o);const a=window.prompt(t+`
移動先のフォルダIDを入力してください:`);if(a===null)return;const n=a.toLowerCase()==="root"?null:a;await p("./app/api/move-file.php",{file_id:m,folder_id:n}),alert("ファイルを移動しました"),window.location.reload()}catch(r){console.error("ファイル移動エラー:",r);const o=r instanceof Error?r.message:"ファイル移動に失敗しました";alert("エラー: "+o)}}h(()=>{console.log("Folder Manager functionality initialized (TypeScript)"),u();const m=window.config;if(m&&m.folders_enabled){const e=new g;window.folderManager=e,console.log("SimpleFolderManager initialized")}else console.log("Folder functionality is disabled or config not available")});window.moveFile=w;
