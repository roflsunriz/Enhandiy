import{r as g,i as p}from"./errorHandling.js";import{F as d}from"./api-client.js";import{p as F}from"./http.js";import{b as m,a as i,c as u}from"./modal.js";class y{currentFolderId=null;constructor(){this.init()}init(){const e=new URLSearchParams(window.location.search);this.currentFolderId=e.get("folder")||null,this.setupEventListeners(),this.loadFolderOptions()}setupEventListeners(){this.bindCreateFolderButton(),document.addEventListener("click",e=>{const o=e.target;if(o.classList.contains("rename-folder")){e.preventDefault();const r=o.dataset.folderId;r&&this.showRenameFolderDialog(r)}if(o.classList.contains("move-folder")){e.preventDefault();const r=o.dataset.folderId;r&&this.showMoveFolderDialog(r)}if(o.classList.contains("delete-folder")){e.preventDefault();const r=o.dataset.folderId;r&&this.showDeleteFolderDialog(r)}})}bindCreateFolderButton(){const e=document.getElementById("create-folder-btn");e?(e.addEventListener("click",()=>this.showCreateFolderDialog()),console.log("Create folder button bound")):(console.log("Create folder button not found, retrying in 500ms"),setTimeout(()=>this.bindCreateFolderButton(),500))}async loadFolderOptions(){try{const e=await d.getFolders();this.updateFolderSelect(e.data||[])}catch(e){console.error("フォルダ読み込みエラー:",e)}}async refreshAll(){try{await this.loadFolderOptions(),window.fileManagerInstance&&await window.fileManagerInstance.refreshFromServer(),this.refreshFolderNavigation()}catch(e){console.error("フォルダとファイル表示の更新に失敗:",e)}}refreshFolderNavigation(){document.querySelector(".folder-navigation")&&this.updateFolderNavigation()}async updateFolderNavigation(){try{const o=(await d.getFolders()).data||[]}catch(e){console.error("フォルダナビゲーション更新エラー:",e)}}updateFolderSelect(e){const o=document.getElementById("folder-select");if(!o)return;const r=o.value;o.innerHTML='<option value="">ルートフォルダ</option>';const t=(a,s=0)=>{a.forEach(n=>{const f=document.createElement("option");f.value=n.id,f.textContent="　".repeat(s)+n.name,o.appendChild(f);const c=n;"children"in n&&c.children&&c.children.length>0&&t(c.children,s+1)})};t(e),o.value=r}async showCreateFolderDialog(){const e=await m("新しいフォルダ名を入力してください:");!e||!e.trim()||this.createFolder(e.trim(),this.currentFolderId)}async createFolder(e,o=null){try{await d.createFolder(e,o||void 0),await i("フォルダを作成しました: "+e),await this.refreshAll()}catch(r){console.error("フォルダ作成エラー:",r);const t=r instanceof Error?r.message:"フォルダ作成に失敗しました";await i("エラー: "+t)}}async showRenameFolderDialog(e){const o=document.querySelector(`[data-folder-id="${e}"] .folder-item`),r=o?o.textContent?.trim().replace("📁","").trim():"",t=await m("新しいフォルダ名を入力してください:",r);!t||!t.trim()||t.trim()===r||this.renameFolder(e,t.trim())}async renameFolder(e,o){try{await d.updateFolder(e,o),await i("フォルダ名を変更しました: "+o),await this.refreshAll()}catch(r){console.error("フォルダ名変更エラー:",r);const t=r instanceof Error?r.message:"フォルダ名変更に失敗しました";await i("エラー: "+t)}}async showMoveFolderDialog(e){try{const r=(await d.getFolders()).data||[];let t=`ルートフォルダに移動する場合は「root」と入力してください。

利用可能なフォルダ:
`;const a=(f,c=0)=>{f.forEach(l=>{l.id!==e&&(t+="　".repeat(c)+`${l.id}: ${l.name}
`);const h=l;"children"in l&&h.children&&h.children.length>0&&a(h.children,c+1)})};a(r);const s=await m(t+`
移動先のフォルダIDを入力してください:`);if(s===null)return;const n=s.toLowerCase()==="root"?null:s;this.moveFolder(e,n)}catch(o){console.error("フォルダ移動ダイアログエラー:",o);const r=o instanceof Error?o.message:"フォルダ移動の準備に失敗しました";await i("エラー: "+r)}}async moveFolder(e,o){try{console.warn("フォルダ移動機能は未実装です",{folderId:e,newParentId:o}),await i("フォルダ移動機能は現在実装中です。");return}catch(r){console.error("フォルダ移動エラー:",r);const t=r instanceof Error?r.message:"フォルダ移動に失敗しました";await i("エラー: "+t)}}async showDeleteFolderDialog(e){const o=document.querySelector(`[data-folder-id="${e}"] .folder-item`),r=o?o.textContent?.trim().replace("📁","").trim():"フォルダ";try{const a=(await d.getFolderFileCount(e)).data?.count||0,s=0;if(a===0&&s===0)await u(`フォルダ「${r}」を削除しますか？`)&&this.deleteFolder(e,!1);else{let n=`フォルダ「${r}」には以下が含まれています：
`;a>0&&(n+=`・ファイル: ${a}個
`),s>0,n+=`
削除方法を選択してください：
`,n+=`「OK」= 中身をルートフォルダに移動して削除
`,n+="「キャンセル」= 削除を中止",await u(n)&&this.deleteFolder(e,!0)}}catch(t){console.error("フォルダ削除確認エラー:",t);const a=t instanceof Error?t.message:"フォルダ情報の取得に失敗しました";await i("エラー: "+a)}}async deleteFolder(e,o=!1){try{const r=await d.deleteFolder(e);if(r.success)await i("フォルダを削除しました");else throw new Error(r.error||"フォルダ削除に失敗しました");await this.refreshAll()}catch(r){console.error("フォルダ削除エラー:",r);const t=r instanceof Error?r.message:"フォルダ削除に失敗しました";await i("エラー: "+t)}}}async function v(w){const e=window.config;if(!e||!e.folders_enabled){await i("フォルダ機能が無効になっています。設定を確認してください。");return}try{const r=(await d.getFolders()).data||[];let t=`ルートフォルダに移動する場合は「root」と入力してください。

利用可能なフォルダ:
`;const a=(f,c=0)=>{f.forEach(l=>{t+="　".repeat(c)+`${l.id}: ${l.name}
`;const h=l;"children"in l&&h.children&&h.children.length>0&&a(h.children,c+1)})};a(r);const s=await m(t+`
移動先のフォルダIDを入力してください:`);if(s===null)return;const n=s.toLowerCase()==="root"?null:s;await F("./app/api/move-file.php",{file_id:w,folder_id:n}),await i("ファイルを移動しました"),window.location.reload()}catch(o){console.error("ファイル移動エラー:",o);const r=o instanceof Error?o.message:"ファイル移動に失敗しました";await i("エラー: "+r)}}g(()=>{console.log("Folder Manager functionality initialized (TypeScript)"),p();const w=window.config;if(w&&w.folders_enabled){const e=new y;window.folderManager=e,console.log("SimpleFolderManager initialized")}else console.log("Folder functionality is disabled or config not available")});window.moveFile=v;
