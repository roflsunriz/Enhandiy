import{r as g,i as p}from"./errorHandling.js";import{a as h}from"./api-client.js";import{p as F}from"./http.js";import{b as w,a as s,c as u}from"./modal.js";class y{currentFolderId=null;constructor(){this.init()}init(){const e=new URLSearchParams(window.location.search);this.currentFolderId=e.get("folder")||null,this.setupEventListeners(),this.loadFolderOptions()}setupEventListeners(){this.bindCreateFolderButton(),document.addEventListener("click",e=>{const t=e.target;if(t.classList.contains("rename-folder")){e.preventDefault();const o=t.dataset.folderId;o&&this.showRenameFolderDialog(o)}if(t.classList.contains("move-folder")){e.preventDefault();const o=t.dataset.folderId;o&&this.showMoveFolderDialog(o)}if(t.classList.contains("delete-folder")){e.preventDefault();const o=t.dataset.folderId;o&&this.showDeleteFolderDialog(o)}})}bindCreateFolderButton(){const e=document.getElementById("create-folder-btn");e?(e.addEventListener("click",()=>this.showCreateFolderDialog()),console.log("Create folder button bound")):(console.log("Create folder button not found, retrying in 500ms"),setTimeout(()=>this.bindCreateFolderButton(),500))}async loadFolderOptions(){try{const e=await h.getFolders();this.updateFolderSelect(e.data||[])}catch(e){console.error("フォルダ読み込みエラー:",e)}}updateFolderSelect(e){const t=document.getElementById("folder-select");if(!t)return;const o=t.value;t.innerHTML='<option value="">ルートフォルダ</option>';const r=(a,i=0)=>{a.forEach(n=>{const d=document.createElement("option");d.value=n.id,d.textContent="　".repeat(i)+n.name,t.appendChild(d);const c=n;"children"in n&&c.children&&c.children.length>0&&r(c.children,i+1)})};r(e),t.value=o}async showCreateFolderDialog(){const e=await w("新しいフォルダ名を入力してください:");!e||!e.trim()||this.createFolder(e.trim(),this.currentFolderId)}async createFolder(e,t=null){try{await h.createFolder(e,t||void 0),await s("フォルダを作成しました: "+e),window.location.reload()}catch(o){console.error("フォルダ作成エラー:",o);const r=o instanceof Error?o.message:"フォルダ作成に失敗しました";await s("エラー: "+r)}}async showRenameFolderDialog(e){const t=document.querySelector(`[data-folder-id="${e}"] .folder-item`),o=t?t.textContent?.trim().replace("📁","").trim():"",r=await w("新しいフォルダ名を入力してください:",o);!r||!r.trim()||r.trim()===o||this.renameFolder(e,r.trim())}async renameFolder(e,t){try{await h.updateFolder(e,t),await s("フォルダ名を変更しました: "+t),window.location.reload()}catch(o){console.error("フォルダ名変更エラー:",o);const r=o instanceof Error?o.message:"フォルダ名変更に失敗しました";await s("エラー: "+r)}}async showMoveFolderDialog(e){try{const o=(await h.getFolders()).data||[];let r=`ルートフォルダに移動する場合は「root」と入力してください。

利用可能なフォルダ:
`;const a=(d,c=0)=>{d.forEach(l=>{l.id!==e&&(r+="　".repeat(c)+`${l.id}: ${l.name}
`);const f=l;"children"in l&&f.children&&f.children.length>0&&a(f.children,c+1)})};a(o);const i=await w(r+`
移動先のフォルダIDを入力してください:`);if(i===null)return;const n=i.toLowerCase()==="root"?null:i;this.moveFolder(e,n)}catch(t){console.error("フォルダ移動ダイアログエラー:",t);const o=t instanceof Error?t.message:"フォルダ移動の準備に失敗しました";await s("エラー: "+o)}}async moveFolder(e,t){try{console.warn("フォルダ移動機能は未実装です",{folderId:e,newParentId:t}),await s("フォルダ移動機能は現在実装中です。");return}catch(o){console.error("フォルダ移動エラー:",o);const r=o instanceof Error?o.message:"フォルダ移動に失敗しました";await s("エラー: "+r)}}async showDeleteFolderDialog(e){const t=document.querySelector(`[data-folder-id="${e}"] .folder-item`),o=t?t.textContent?.trim().replace("📁","").trim():"フォルダ";try{const a=(await h.getFolderFileCount(e)).data?.count||0,i=0;if(a===0&&i===0)await u(`フォルダ「${o}」を削除しますか？`)&&this.deleteFolder(e,!1);else{let n=`フォルダ「${o}」には以下が含まれています：
`;a>0&&(n+=`・ファイル: ${a}個
`),i>0,n+=`
削除方法を選択してください：
`,n+=`「OK」= 中身をルートフォルダに移動して削除
`,n+="「キャンセル」= 削除を中止",await u(n)&&this.deleteFolder(e,!0)}}catch(r){console.error("フォルダ削除確認エラー:",r);const a=r instanceof Error?r.message:"フォルダ情報の取得に失敗しました";await s("エラー: "+a)}}async deleteFolder(e,t=!1){try{const o=await h.deleteFolder(e);if(o.success)await s("フォルダを削除しました");else throw new Error(o.error||"フォルダ削除に失敗しました");window.location.reload()}catch(o){console.error("フォルダ削除エラー:",o);const r=o instanceof Error?o.message:"フォルダ削除に失敗しました";await s("エラー: "+r)}}}async function E(m){const e=window.config;if(!e||!e.folders_enabled){await s("フォルダ機能が無効になっています。設定を確認してください。");return}try{const o=(await h.getFolders()).data||[];let r=`ルートフォルダに移動する場合は「root」と入力してください。

利用可能なフォルダ:
`;const a=(d,c=0)=>{d.forEach(l=>{r+="　".repeat(c)+`${l.id}: ${l.name}
`;const f=l;"children"in l&&f.children&&f.children.length>0&&a(f.children,c+1)})};a(o);const i=await w(r+`
移動先のフォルダIDを入力してください:`);if(i===null)return;const n=i.toLowerCase()==="root"?null:i;await F("./app/api/move-file.php",{file_id:m,folder_id:n}),await s("ファイルを移動しました"),window.location.reload()}catch(t){console.error("ファイル移動エラー:",t);const o=t instanceof Error?t.message:"ファイル移動に失敗しました";await s("エラー: "+o)}}g(()=>{console.log("Folder Manager functionality initialized (TypeScript)"),p();const m=window.config;if(m&&m.folders_enabled){const e=new y;window.folderManager=e,console.log("SimpleFolderManager initialized")}else console.log("Folder functionality is disabled or config not available")});window.moveFile=E;
