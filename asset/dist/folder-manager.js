import{r as u,i as w}from"./errorHandling.js";import{g as p,p as m,a as h,d as g}from"./http.js";class F{currentFolderId=null;constructor(){this.init()}init(){const r=new URLSearchParams(window.location.search);this.currentFolderId=r.get("folder")||null,this.setupEventListeners(),this.loadFolderOptions()}setupEventListeners(){const r=document.getElementById("create-folder-btn");r&&r.addEventListener("click",()=>this.showCreateFolderDialog()),document.addEventListener("click",t=>{const o=t.target;if(o.classList.contains("rename-folder")){t.preventDefault();const e=o.dataset.folderId;e&&this.showRenameFolderDialog(e)}if(o.classList.contains("move-folder")){t.preventDefault();const e=o.dataset.folderId;e&&this.showMoveFolderDialog(e)}if(o.classList.contains("delete-folder")){t.preventDefault();const e=o.dataset.folderId;e&&this.showDeleteFolderDialog(e)}})}async loadFolderOptions(){try{const r=await p("./app/api/folders.php");this.updateFolderSelect(r.folders||[])}catch(r){console.error("フォルダ読み込みエラー:",r)}}updateFolderSelect(r){const t=document.getElementById("folder-select");if(!t)return;const o=t.value;t.innerHTML='<option value="">ルートフォルダ</option>';const e=(a,s=0)=>{a.forEach(n=>{const d=document.createElement("option");d.value=n.id,d.textContent="　".repeat(s)+n.name,t.appendChild(d);const i=n;"children"in n&&i.children&&i.children.length>0&&e(i.children,s+1)})};e(r),t.value=o}showCreateFolderDialog(){const r=window.prompt("新しいフォルダ名を入力してください:");!r||!r.trim()||this.createFolder(r.trim(),this.currentFolderId)}async createFolder(r,t=null){try{await m("./app/api/folders.php",{name:r,parent_id:t}),alert("フォルダを作成しました: "+r),window.location.reload()}catch(o){console.error("フォルダ作成エラー:",o);const e=o instanceof Error?o.message:"フォルダ作成に失敗しました";alert("エラー: "+e)}}showRenameFolderDialog(r){const t=document.querySelector(`[data-folder-id="${r}"] .folder-item`),o=t?t.textContent?.trim().replace("📁","").trim():"",e=window.prompt("新しいフォルダ名を入力してください:",o);!e||!e.trim()||e.trim()===o||this.renameFolder(r,e.trim())}async renameFolder(r,t){try{await h("./app/api/folders.php",{id:r,name:t}),alert("フォルダ名を変更しました: "+t),window.location.reload()}catch(o){console.error("フォルダ名変更エラー:",o);const e=o instanceof Error?o.message:"フォルダ名変更に失敗しました";alert("エラー: "+e)}}async showMoveFolderDialog(r){try{const o=(await p("./app/api/folders.php")).folders||[];let e=`ルートフォルダに移動する場合は「root」と入力してください。

利用可能なフォルダ:
`;const a=(d,i=0)=>{d.forEach(l=>{l.id!==r&&(e+="　".repeat(i)+`${l.id}: ${l.name}
`);const f=l;"children"in l&&f.children&&f.children.length>0&&a(f.children,i+1)})};a(o);const s=window.prompt(e+`
移動先のフォルダIDを入力してください:`);if(s===null)return;const n=s.toLowerCase()==="root"?null:s;this.moveFolder(r,n)}catch(t){console.error("フォルダ移動ダイアログエラー:",t);const o=t instanceof Error?t.message:"フォルダ移動の準備に失敗しました";alert("エラー: "+o)}}async moveFolder(r,t){try{await h("./app/api/folders.php",{id:r,parent_id:t}),alert("フォルダを移動しました"),window.location.reload()}catch(o){console.error("フォルダ移動エラー:",o);const e=o instanceof Error?o.message:"フォルダ移動に失敗しました";alert("エラー: "+e)}}async showDeleteFolderDialog(r){const t=document.querySelector(`[data-folder-id="${r}"] .folder-item`),o=t?t.textContent?.trim().replace("📁","").trim():"フォルダ";try{const e=await p(`./app/api/folders.php?id=${r}&check=true`),a=e.file_count||0,s=e.child_count||0;if(a===0&&s===0)confirm(`フォルダ「${o}」を削除しますか？`)&&this.deleteFolder(r,!1);else{let n=`フォルダ「${o}」には以下が含まれています：
`;a>0&&(n+=`・ファイル: ${a}個
`),s>0&&(n+=`・子フォルダ: ${s}個
`),n+=`
削除方法を選択してください：
`,n+=`「OK」= 中身をルートフォルダに移動して削除
`,n+="「キャンセル」= 削除を中止",confirm(n)&&this.deleteFolder(r,!0)}}catch(e){console.error("フォルダ削除確認エラー:",e);const a=e instanceof Error?e.message:"フォルダ情報の取得に失敗しました";alert("エラー: "+a)}}async deleteFolder(r,t=!1){try{const o=`./app/api/folders.php?id=${r}${t?"&move_files=true":""}`,e=await g(o);t&&e.moved_files&&e.moved_files>0?alert(`フォルダを削除しました。
${e.moved_files}個のファイルをルートフォルダに移動しました。`):alert("フォルダを削除しました"),window.location.reload()}catch(o){console.error("フォルダ削除エラー:",o);const e=o instanceof Error?o.message:"フォルダ削除に失敗しました";alert("エラー: "+e)}}}async function y(c){if(!window.folderManager){alert("フォルダマネージャが初期化されていません");return}try{const t=(await p("./app/api/folders.php")).folders||[];let o=`ルートフォルダに移動する場合は「root」と入力してください。

利用可能なフォルダ:
`;const e=(n,d=0)=>{n.forEach(i=>{o+="　".repeat(d)+`${i.id}: ${i.name}
`;const l=i;"children"in i&&l.children&&l.children.length>0&&e(l.children,d+1)})};e(t);const a=window.prompt(o+`
移動先のフォルダIDを入力してください:`);if(a===null)return;const s=a.toLowerCase()==="root"?null:a;await m("./app/api/move-file.php",{file_id:c,folder_id:s}),alert("ファイルを移動しました"),window.location.reload()}catch(r){console.error("ファイル移動エラー:",r);const t=r instanceof Error?r.message:"ファイル移動に失敗しました";alert("エラー: "+t)}}u(()=>{if(console.log("Folder Manager functionality initialized (TypeScript)"),w(),document.getElementById("folder-grid")||document.getElementById("folder-select")){const c=new F;window.folderManager=c}});window.moveFile=y;
