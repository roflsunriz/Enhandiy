name: 🚀 Automated Release

on:
  push:
    tags:
      - 'v*.*.*'  # v4.0.0 などのタグでトリガー
  workflow_dispatch:  # 手動実行も可能
    inputs:
      tag_name:
        description: 'Release tag (e.g., v4.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得してchangelogを生成

      - name: 🏷️ Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: 📋 Extract version from tag
        id: version
        run: |
          TAG_NAME="${{ steps.tag.outputs.tag_name }}"
          # タグからバージョンを抽出 (v4.0.0 -> 4.0.0)
          VERSION=${TAG_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: 🔍 Find release notes
        id: release_notes
        run: |
          TAG_NAME="${{ steps.tag.outputs.tag_name }}"
          VERSION="${{ steps.version.outputs.version }}"
          
          # リリースノートファイルを探す（複数のパターンを試す）
          if [ -f "docs/RELEASE_NOTES_v${VERSION}.md" ]; then
            NOTES_FILE="docs/RELEASE_NOTES_v${VERSION}.md"
          elif [ -f "docs/RELEASE_NOTES_${VERSION}.md" ]; then
            NOTES_FILE="docs/RELEASE_NOTES_${VERSION}.md"
          elif [ -f "docs/RELEASE_NOTES_${TAG_NAME}.md" ]; then
            NOTES_FILE="docs/RELEASE_NOTES_${TAG_NAME}.md"
          elif [ -f "CHANGELOG.md" ]; then
            NOTES_FILE="CHANGELOG.md"
          else
            echo "No release notes found, using default"
            NOTES_FILE=""
          fi
          
          echo "notes_file=$NOTES_FILE" >> $GITHUB_OUTPUT
          echo "Found release notes: $NOTES_FILE"
          echo "Searched patterns:"
          echo "  - RELEASE_NOTES_v${VERSION}.md"
          echo "  - RELEASE_NOTES_${VERSION}.md"
          echo "  - RELEASE_NOTES_${TAG_NAME}.md"
          echo "  - CHANGELOG.md"

      - name: 📝 Prepare release body
        id: release_body
        run: |
          TAG_NAME="${{ steps.tag.outputs.tag_name }}"
          VERSION="${{ steps.version.outputs.version }}"
          NOTES_FILE="${{ steps.release_notes.outputs.notes_file }}"
          
          # リリースボディを作成
          cat > release_body.md << 'EOF'
          # Enhandiy ${{ steps.tag.outputs.tag_name }} - Official Release

          ## リリースノート
          EOF

          # リリースノートファイルがあれば追加
          if [ -n "$NOTES_FILE" ] && [ -f "$NOTES_FILE" ]; then
            echo "" >> release_body.md
            cat "$NOTES_FILE" >> release_body.md
          fi

          # 変更履歴を追加
          echo "" >> release_body.md
          echo "## 🔄 Recent Changes" >> release_body.md
          echo "" >> release_body.md
          echo '```' >> release_body.md
          git log --oneline -5 >> release_body.md
          echo '```' >> release_body.md

          # CHANGELOG.md が存在する場合、最新の3セクションを抽出して追加
          if [ -f "CHANGELOG.md" ]; then
            echo "" >> release_body.md
            echo "## CHANGELOG - Latest 3 entries" >> release_body.md
            awk 'BEGIN{count=0;printing=0} /^##\s/ {count++; if(count>3) exit; printing=1} { if(printing) print }' CHANGELOG.md >> release_body.md
          fi

          # インストール手順を追加
          cat >> release_body.md << 'EOF'

          ## 📦 インストール方法

          ### ダウンロードオプション
          - **Source Code**: 以下のソースコードアーカイブをダウンロード
          - **Git Clone**: `git clone https://github.com/roflsunriz/Enhandiy.git`
          - **特定のタグ**: `git clone -b ${{ steps.tag.outputs.tag_name }} https://github.com/roflsunriz/Enhandiy.git`

          ### クイックセットアップ
          1. ダウンロードしたアーカイブを展開
          2. `backend/config/config.php.example` を `backend/config/config.php` にコピー
          3. `backend/config/config.php` に設定を設定
          4. ウェブサーバーをbackend/publicのルートに設定
          5. アプリケーションにアクセス - データベースは自動的に作成されます

          ## 🔗 リンク
          - **ドキュメント**: `docs/` ディレクトリを参照
          - **APIリファレンス**: `docs/API.md`
          - **オリジナルプロジェクト**: [shimosyan/phpUploader](https://github.com/shimosyan/phpUploader)

          ## 🙏 謝辞
          この拡張バージョンは、オリジナルのphpUploaderプロジェクトが提供する優れた基盤に基づいて構築されています。

          **変更履歴**: https://github.com/roflsunriz/Enhandiy/commits/${{ steps.tag.outputs.tag_name }}
          EOF
          
          echo "リリースボディを作成しました"

      - name: 🏗️ Build release assets
        run: |
          # プロジェクトのアーカイブを作成
          TAG_NAME="${{ steps.tag.outputs.tag_name }}"
          PROJECT_NAME="Enhandiy-${TAG_NAME}"
          
          # 不要なファイルを除外してアーカイブ作成
          mkdir -p dist
          
          # Git履歴を除外した完全なソースコード
          git archive --format=zip --prefix="${PROJECT_NAME}/" HEAD > "dist/${PROJECT_NAME}-source.zip"
          git archive --format=tar.gz --prefix="${PROJECT_NAME}/" HEAD > "dist/${PROJECT_NAME}-source.tar.gz"
          
          # ファイルサイズを確認
          ls -lh dist/
          
          echo "リリースアセットを作成しました"

      - name: 🚀 Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          release_name: Enhandiy ${{ steps.tag.outputs.tag_name }}
          body_path: release_body.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}

      - name: 📎 Upload ZIP Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/Enhandiy-${{ steps.tag.outputs.tag_name }}-source.zip
          asset_name: Enhandiy-${{ steps.tag.outputs.tag_name }}-source.zip
          asset_content_type: application/zip

      - name: 📎 Upload TAR.GZ Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/Enhandiy-${{ steps.tag.outputs.tag_name }}-source.tar.gz
          asset_name: Enhandiy-${{ steps.tag.outputs.tag_name }}-source.tar.gz
          asset_content_type: application/gzip

      - name: 📢 Release Summary
        run: |
          echo "## 🎉 リリースが正常に作成されました！" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag**: ${{ steps.tag.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL**: ${{ steps.create_release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 リリースアセット" >> $GITHUB_STEP_SUMMARY
          echo "- Source code (ZIP)" >> $GITHUB_STEP_SUMMARY
          echo "- Source code (TAR.GZ)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 クイックリンク" >> $GITHUB_STEP_SUMMARY
          echo "- [View Release](${{ steps.create_release.outputs.html_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Download ZIP](https://github.com/roflsunriz/Enhandiy/releases/download/${{ steps.tag.outputs.tag_name }}/Enhandiy-${{ steps.tag.outputs.tag_name }}-source.zip)" >> $GITHUB_STEP_SUMMARY
          echo "- [Download TAR.GZ](https://github.com/roflsunriz/Enhandiy/releases/download/${{ steps.tag.outputs.tag_name }}/Enhandiy-${{ steps.tag.outputs.tag_name }}-source.tar.gz)" >> $GITHUB_STEP_SUMMARY

  notify-completion:
    name: 📬 Notify Completion
    runs-on: ubuntu-latest
    needs: create-release
    if: always()
    
    steps:
      - name: 🎉 Success Notification
        if: needs.create-release.result == 'success'
        run: |
          echo "✅ リリース自動化が正常に完了しました！"
          echo "🚀 新しいリリースがGitHubで利用可能になりました"
          
      - name: ❌ Failure Notification
        if: needs.create-release.result == 'failure'
        run: |
          echo "❌ リリース自動化に失敗しました"
          echo "ログを確認し、再度試行してください"
          exit 1